from sympy import sympify, Rational
from .. import loader, utils
import time

@loader.tds
class CalculatorModule(loader.Module):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!"""

    strings = {"name": "Calculator"}

    def __init__(self):
        self.round_down = False
        self.use_e = False

    @loader.unrestricted
    @loader.command("rounddown")
    async def zi(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –º–µ–Ω—å—à–µ–≥–æ —á–∏—Å–ª–∞."""
        self.round_down = not self.round_down
        await self.update_mode_message(message)

    @loader.unrestricted
    @loader.command("mode")
    async def mode(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏ e."""
        self.use_e = not self.use_e
        await self.update_mode_message(message)

    async def update_mode_message(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ."""
        mode_text = "üî¢ –û–±—ã—á–Ω—ã–µ —á–∏—Å–ª–∞" if not self.use_e else "–ß–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ üÖ¥"
        round_text = "üîÑ –í–∫–ª—é—á–µ–Ω–æ" if self.round_down else "üîÑ –í—ã–∫–ª—é—á–µ–Ω–æ"
        reply_msg = await utils.answer(message, f"{mode_text} | {round_text} –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –º–µ–Ω—å—à–µ–≥–æ —á–∏—Å–ª–∞.")
        time.sleep(5)
        await reply_msg.delete()

    def remove_decimal(self, number_str):
        """–£–¥–∞–ª–∏—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞ –≤–ø–ª–æ—Ç—å –¥–æ 'e'."""
        if '.' in number_str and 'e' in number_str:
            integer_part, remainder = number_str.split('.')
            return f"{integer_part}e{remainder.split('e')[1]}"
        return number_str

    def format_result(self, result):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
        if isinstance(result, Rational):
            if self.round_down:
                result_str = self.remove_decimal(f"{int(result.evalf()):e}") if self.use_e else f"{int(result.evalf())}"
            else:
                result_str = f"{result.evalf():e}" if self.use_e else f"{result.evalf()}"
        else:
            if self.round_down:
                result_str = self.remove_decimal(f"{int(result):e}") if self.use_e else f"{int(result)}"
            else:
                result_str = self.remove_decimal(f"{result:e}") if self.use_e else f"{result}"
        return result_str

    @loader.command("calc", "<expression>", aliases=["calculate"])
    async def calc(self, message):
        """–í—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ."""
        expression = utils.get_args_raw(message)

        try:
            result = sympify(expression)
            result_str = self.format_result(result)
            await utils.answer(message, f"üßÆ <b>{expression} = {result_str}</b>")
        except Exception as e:
            error_message = await utils.answer(message, f"‚ö†Ô∏è <b>–û–π! –û—à–∏–±–∫–∞!</b>")
            time.sleep(5)
            await error_message.delete()
