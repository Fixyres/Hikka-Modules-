from sympy import sympify, Integer
from .. import loader, utils

@loader.tds
class CalculatorModule(loader.Module):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!"""

    strings = {"name": "Calculator"}

    @loader.command("calc", "<expression>", aliases=["calculate"])
    async def calc(self, message):
        """‚†Ä"""
        expression = utils.get_args_raw(message)

        if not expression:
            await utils.answer(message, "‚ö†Ô∏è <b>–û–π! –û—à—ã–±–∫–∞!</b>")
            return

        if not all(part.isnumeric() or part.replace(".", "", 1).isnumeric() for part in expression.split()):
            await utils.answer(message, "‚ö†Ô∏è <b>–û–π! –û—à—ã–±–∫–∞!</b>")
            return

        try:
            result = sympify(expression)
            result_str = f"{result:.5e}" if isinstance(result, Integer) and abs(result) > 1e6 else str(result)
            await utils.answer(message, f"üßÆ <b>{expression} = {result_str}</b>")
        except Exception as e:
            await utils.answer(message, f"‚ö†Ô∏è <b>–û—à—ã–±–∫–∞: {e}</b>")