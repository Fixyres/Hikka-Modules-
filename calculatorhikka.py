from sympy import sympify, Rational
from .. import loader, utils
import time

@loader.tds
class CalculatorModule(loader.Module):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!"""

    strings = {"name": "Calculator"}

    def __init__(self):
        self.round_down = False

    @loader.unrestricted
    @loader.command("rounddown")
    async def zi(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –º–µ–Ω—å—à–µ–≥–æ —á–∏—Å–ª–∞."""
        self.round_down = not self.round_down
        await utils.answer(message, f"{'üîÑ –í–∫–ª—é—á–µ–Ω–æ' if self.round_down else 'üîÑ –í—ã–∫–ª—é—á–µ–Ω–æ'} –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –º–µ–Ω—å—à–µ–≥–æ —á–∏—Å–ª–∞.")

    @loader.command("calc", "<expression>", aliases=["calculate"])
    async def calc(self, message):
        """–í—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ."""
        expression = utils.get_args_raw(message)

        try:
            result = sympify(expression)
            if isinstance(result, Rational):
                if self.round_down:
                    result_str = f"{int(result.evalf())}"
                else:
                    result_str = f"{result.evalf()}"
            else:
                if self.round_down:
                    result_str = f"{int(result)}"
                else:
                    result_str = f"{result}"
            await utils.answer(message, f"üßÆ <b>{expression} = {result_str}</b>")
        except Exception as e:
            error_message = await utils.answer(message, f"‚ö†Ô∏è <b>–û–π! –û—à–∏–±–∫–∞!</b>")
            time.sleep(5)
            await error_message.delete()
